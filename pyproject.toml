[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-agent"
version = "0.1.0"
description = "Ultra-lightweight Python command-line AI coding agent under 400 lines"
authors = [{name = "Agent", email = "agent@example.com"}]
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["ai", "agent", "cli", "coding", "assistant", "litellm", "bash", "tool"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.0",
    "google-auth>=2.40.3",
    "google-cloud-aiplatform>=1.111.0",
    "litellm>=1.0",
    "pyyaml>=6.0",
]

[project.scripts]
agent = "python_agent.cli:main"

[dependency-groups]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.1",
    "mypy>=1.0",
    "black>=23.0",
    "types-pyyaml>=6.0.12.20250822",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-asyncio>=0.21",
    "hypothesis>=6.68",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = ["E501"]  # Line too long (handled by black)

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.mypy]
strict = true
warn_unreachable = true
warn_unused_ignores = true
python_version = "3.10"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Fast unit tests",
    "integration: Integration tests requiring setup",
    "api: Tests requiring API keys",
    "e2e: End-to-end workflow tests",
    "slow: Long-running tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
